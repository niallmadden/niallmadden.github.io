<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>   
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1" />
<meta name="Description" content="Singularly Perturbed Differential Equations" />
<meta name="Keywords" content="Irish Research Group on Singularly Perturbed Differential Equations" />
<meta name="Language" content="English" />
<title>An introduction to the analysis and implementation of Sparse
  Grid Finite Element Methods</title>
<style type="text/css" title="layout" media="screen"> @import url("style.css"); </style>
</head>

<body>
  
<div id="Page"><div id="BodyTop"></div>
  <div id="Body">
    <div id="Navigation"><div id="SiteHeader"></div>
      <div id="PageHeaderPad">
	<div id="PageHeader"><div class="pad">
	    <h3>An introduction to the analysis and</h3>
	    <h2>(MATLAB) implementation of Sparse Grid Finite Element Methods</h2>
	    <h3>by Stephen Russell
	      and <a href="http://www.maths.nuigalway.ie/~niall">Niall Madden</a></h3>
	  </div>
	</div>
      </div>
    </div>
    
    <div class="pad">
      <p>This page contains links to MATLAB source code that computes
	solutions to the partial differential equations:
	\[ -\Delta u +bu=f(x,y) \quad \text{in }\Omega :=(0,1)^2, \]
	\[
	u=0 \quad \text{on } \partial \Omega.
	\]
      </p>

      <p>Three related schemes are used:
	<ol>
	  <li>A classical Galerkin finite element method with bilinear  elements;</li>
	  <li>A two-scale sparse grid finite element method;</li>
	  <li>A multi-scale spare grid finite element method.</li>
	</ol>
      </p>
	  
      <p>All the code is  written  in <a href="http://www.mathworks.com">MATLAB</a>, and uses
	the <a href="http://www.chebfun.org/">Chebfun</a> toolbox to
	simplify some calculations. With some minor adjustments, the calls
	to Chebfun may be by-passed, and so resulting in code that will 
	run on both MATLAB and <a href="http://www.gnu.org/software/octave/">Octave</a>.</p> 

      <p>For more information, see <br />
	<blockquote>
	  Stephen Russell and Niall Madden, <a href="IntroSGv09n.pdf">An
	    introduction to the analysis and implementation sparse grid finite
	    element methods</a>. <b>Preliminary version, 2 December, 2014</b>,
	  Technical report, School of Mathematics,
	  Statistics and Applied Mathematics, NUI Galway.
	</blockquote>
      </p>			     
    </div>

    <div class="pad">
      <h1><a name="Code">MATLAB Source Code</a></h1>
      <div>
	<div class="Body">
	  <ul>
	    <li><a href="Test_FEM.m">Test_FEM.m</a> Test harness for
	      the standard Galerkin FEM, and the two-scale and
	      multiscale sparse grid methods.</li>
	    <li><a href="FEM_System_Matrix.m">FEM_System_Matrix.m</a> Function to construct
	      the system matrix for the standard Galerkin method with
	      bilinear elements.</li>
	    <li><a href="FEM_RHS.m">FEM_RHS.m</a> Function to construct
	      right-hand side of the linear system.</li>
	    <li><a href="TwoScale_Projector.m">TwoScale_Projector.m</a> Function to construct
	      the projector for the two-scale sparse grid method.</li>
	    <li><a href="MultiScale_Projector.m">MultiScale_Projector.m</a> Function to construct
	      the projector for the multiscale sparse grid method.</li>
	  </ul>
	</div>
      </div>
    </div>
    <div class="pad">
      <h1><a name="Abstract">Abstract</a></h1>
      <div>The goal of this article is to present elementary approaches to the
	analysis and programming of sparse grid finite element methods. This
	family of schemes can compute accurate solutions to partial
	differential equations, but using far fewer degrees of freedom than
	their classical counterparts.
	After a brief discussion of the classical Galerkin finite element method with bilinear elements, we
	give a short analysis of what is probably the simplest sparse grid
	method: the  two-scale technique  of <a href="http://link.springer.com/article/10.1007%2FPL00005456">
        Lin et al. (2001)</a>. 
        We then demonstrate  how to extend this to a multiscale sparse
	grid method. 
        This  method is equivalent to the hierarchical basis approach,  
	as described in, e.g.,
	by <a href="http://dx.doi.org/10.1017/S0962492904000182">Bungartz
	and Griebel (2004)</a>. However, by presenting it as an extension of the
	two-scale method, we can give an elementary treatment of its analysis
	and implementation. 
	For each method considered, we provide
	MATLAB code for the implementation, and a comparison of accuracy and  
	computational costs.
      </div>
    </div>
  </div>
  <div class="clear"></div>
  <br />
</div>
  

<div id="BodyBottom"></div>
<div class="clear"></div>

<div id="Footer">
  <br />
</div>
</div>
</body>
</html>
